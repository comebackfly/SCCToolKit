/*=========================================================================
 
 This software is distributed WITHOUT ANY WARRANTY; without even
 the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR
 PURPOSE.  See the above copyright notices for more information.
 
 =========================================================================*/
/**
 * @file
 * Main window class implementations.
 */

#include <QSettings>
#include <QtDebug>

#include <opencv2/core/core.hpp>
#include "my_mainwindow.h"
#include "my_settings.h"
#include "timerSingleton.h"
#include "DeckLinkAPI.h"
#include "DeckLinkModeInfoIterator.h"

#define BUFLEN 1024

MainWindow::MainWindow(QWidget* parent)
    : QDialog ( parent, Qt::WindowMinimizeButtonHint | Qt::WindowCloseButtonHint)
//    , imageWidth(0)
//    , imageHeight(0)
{
    // Set up the UI generated by Designer.
    setupUi(this);
    
    // Set up Combo Boxes
    setComboBox(comboBox_Algorithm, QString(tr("NativeYUVConversion_CvFlip")), kNativeYUVConversion_CvFlip);
    setComboBox(comboBox_Algorithm, QString(tr("NativeYUVConversion_QtFlip")), kNativeYUVConversion_QtFlip);
    setComboBox(comboBox_Algorithm, QString(tr("NativeYUVConversion_MyFlip")), kNativeYUVConversion_MyFlip);
    setComboBox(comboBox_Algorithm, QString(tr("MyYUVConversion_CvCopy")), kMyYUVConversion_CvCopy);
    setComboBox(comboBox_Algorithm, QString(tr("MyYUVConversion_QtCopy")), kMyYUVConversion_QtCopy);
    setComboBox(comboBox_Algorithm, QString(tr("MyYUVConversion_MyCopy")), kMyYUVConversion_MyCopy);
    comboBox_Algorithm->setCurrentIndex(0);

    DeckLinkModeInfoIterator *modeInfoIterator = DeckLinkModeInfoIterator::sharedInstance();
    
    /*
    setComboBox(comboBox_InputPixel, QString(tr("8bit YUV")), bmdFormat8BitYUV);
    setComboBox(comboBox_InputPixel, QString(tr("8bit BGRA")), bmdFormat8BitBGRA);
    setComboBox(comboBox_InputPixel, QString(tr("8bit ARGB")), bmdFormat8BitARGB);
    setComboBox(comboBox_InputPixel, QString(tr("10bit YUV")), bmdFormat10BitYUV);
    setComboBox(comboBox_InputPixel, QString(tr("10bit RGB")), bmdFormat10BitRGB);
     */
    setComboBox(comboBox_InputPixel, QString(DeckLinkModeInfoIterator::getPixelFormatName(bmdFormat8BitYUV)), bmdFormat8BitYUV);
    setComboBox(comboBox_InputPixel, QString(DeckLinkModeInfoIterator::getPixelFormatName(bmdFormat8BitBGRA)), bmdFormat8BitBGRA);
    setComboBox(comboBox_InputPixel, QString(DeckLinkModeInfoIterator::getPixelFormatName(bmdFormat8BitARGB)), bmdFormat8BitARGB);
    setComboBox(comboBox_InputPixel, QString(DeckLinkModeInfoIterator::getPixelFormatName(bmdFormat10BitYUV)), bmdFormat10BitYUV);
    setComboBox(comboBox_InputPixel, QString(DeckLinkModeInfoIterator::getPixelFormatName(bmdFormat10BitRGB)), bmdFormat10BitRGB);
    
    comboBox_InputPixel->setCurrentIndex(0);
    
    char buf[BUFLEN];

    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD1080i5994, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD1080i5994);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD1080p5994, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD1080p5994);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD1080i6000, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD1080i6000);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD1080p6000, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD1080p6000);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD720p5994, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD720p5994);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeHD720p60, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeHD720p60);
    modeInfoIterator->initAsInput();
    if (modeInfoIterator->findDisplayModeByMode(buf, BUFLEN, bmdModeNTSC, NULL, NULL, NULL) >= 0)
        setComboBox(comboBox_InputFormat, QString(buf), bmdModeNTSC);
    if (comboBox_InputFormat->count() > 0)
        comboBox_InputFormat->setCurrentIndex(0);
    
    btnUpdate->hide();
    onMsgUpdate("");
    
	// Set signal-slot connections.
	setConnections();
	//emit setApplicationStatus(mStatus);
}


MainWindow::~MainWindow()
{
}

/*
 void MainWindow::closeEvent(QCloseEvent *event)
 {
 mSettings->setValue("mainwindow/size", this->size());
 mSettings->setValue("mainwindow/pos", this->pos());
 // event->accept();
 std::cerr << "closeevent" <<std::endl;
 }
 */

// ACCESSORS ///////////////////////////////////////////////////////////
//

// PUBLIC SLOTS ////////////////////////////////////////////////////////
//
// Sync window's status that may be modified by Application:: class,
// which is the Model object in terms of the MVC pattern.
//
void MainWindow::onSetApplicationStatus( ApplicationStatus& status )
{
    
    frameMainViewL->srcWidth  = status.srcSizeL.width();
    frameMainViewL->srcHeight = status.srcSizeL.height();
    frameMainViewL->srcCenter = status.srcCenterL;
    
    frameMainViewR->srcWidth  = status.srcSizeR.width();
    frameMainViewR->srcHeight = status.srcSizeR.height();
    frameMainViewR->srcCenter = status.srcCenterR;

    setComboBoxFromValue(comboBox_InputPixel, status.inputPixelMode);
    setComboBoxFromValue(comboBox_InputFormat, status.inputFormatMode);
    setComboBoxFromValue(comboBox_Algorithm, status.drawMode);
    
    dialnConcurrentTasks->setValue(status.nConcurrentTasks);
    
    sliderEndoAxis->setValue(status.endoAxis);
    
    btnUpdate->hide();
    
	mStatus = status;
}

void MainWindow::on_sliderEndoAxis_valueChanged(int val)
{
    mStatus.endoAxis = val;
    emit setApplicationStatus(mStatus);
}

void MainWindow::on_btnResetAvg_clicked()
{
    timerSingleton *t = timerSingleton::sharedInstance();
    t->tReset();
}

void MainWindow::on_btnUpdate_clicked()
{
    mStatus.drawMode = (kDrawMode)getValueFromComboBox(comboBox_Algorithm);
    mStatus.inputFormatMode = getValueFromComboBox(comboBox_InputFormat);
    mStatus.inputPixelMode  = getValueFromComboBox(comboBox_InputPixel);
    mStatus.nConcurrentTasks= dialnConcurrentTasks->value();
    emit setApplicationStatus(mStatus);

    timerSingleton *t = timerSingleton::sharedInstance();
    t->tReset();
    onTimerUpdate();
    
    btnUpdate->hide();
}

void MainWindow::onTimerUpdate()
{
    timerSingleton *t = timerSingleton::sharedInstance();
    LCDLatency->display(t->tLatest);
    LCDAverage->display(t->avgTime());
}

void MainWindow::onMsgUpdate(const char *str)
{
    msgLabelL->setText(QString(str));
}


void MainWindow::onUpdateImage(cv::Mat& mat)
{
/*
    if (imageWidth == 0 && imageHeight == 0) {
        imageWidth = mat.cols;
        imageHeight = mat.rows;
    }
*/
    emit reqUpdateImage(mat);
}

void MainWindow::onUpdateImageL(cv::Mat& mat)
{
    emit reqUpdateImageL(mat);
}

void MainWindow::onUpdateImageR(cv::Mat& mat)
{
    emit reqUpdateImageR(mat);
}

/*
void MainWindow::onUpdateStereoImage(cv::Mat& lMat, cv::Mat& rMat)
{
    frameMainViewL->onUpdateImage(lMat);
    frameMainViewR->onUpdateImage(rMat);
}
*/

//
// "Quit"
//
void MainWindow::reject()
{
	emit reqQuit();
}


// PRIVATE METHODS /////////////////////////////////////////////////////
//
// Set signal-slot connections.
//
void MainWindow::setConnections(void)
{
	connect(this, SIGNAL(reqUpdateImage(cv::Mat&)),
			frameMainViewL, SLOT(onUpdateImage(cv::Mat&)));
	connect(this, SIGNAL(reqUpdateImage(cv::Mat&)),
			frameMainViewR, SLOT(onUpdateImage(cv::Mat&)));
	connect(this, SIGNAL(reqUpdateImageL(cv::Mat&)),
			frameMainViewL, SLOT(onUpdateImage(cv::Mat&)));
	connect(this, SIGNAL(reqUpdateImageR(cv::Mat&)),
			frameMainViewR, SLOT(onUpdateImage(cv::Mat&)));
}

void MainWindow::setComboBox(QComboBox* cb, const QString& str, unsigned val)
{
    QVariant qval(val);
    cb->addItem(str, qval);
}

unsigned MainWindow::getValueFromComboBox(const QComboBox* cb)
{
    int idx = cb->currentIndex();
    QVariant qval = cb->itemData(idx);
    unsigned val = qval.toUInt();
    return val;
}

void MainWindow::setComboBoxFromValue(QComboBox* cb, unsigned val)
{
    int idx = cb->findData(QVariant(val));
    if (idx != -1)
        cb->setCurrentIndex(idx);
}